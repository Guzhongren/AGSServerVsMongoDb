require(["esri/map",
        'esri/layers/FeatureLayer',
        'esri/tasks/query',
        'esri/geometry/Circle',
        'esri/geometry/Point',
        'esri/graphic',
        'esri/InfoTemplate',
        'esri/symbols/SimpleMarkerSymbol',
        'esri/symbols/SimpleLineSymbol',
        'esri/symbols/SimpleFillSymbol',
        'esri/renderers/SimpleRenderer',
        'esri/config',
        'esri/Color',
        'dojo/dom',
        'dojo/on',
        'dojo/html',
        'dojo/dom-construct',
        "dojo/domReady!"], function(Map, FeatureLayer, Query, Circle, Point, Graphic,InfoTemplate,
            SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol, SimpleRenderer, Config, Color,
            dom,on, dojoHtml, domConstruct
        ){
            var serverStartTime, serverEndTime, serverTimeSpan, serverCount;
            var mongoStartTime, mongoEndTime, mongoTimeSpan, mongoCount;
            var clickPoint;
            var j=0;
            //===================================AGS Server===================================
            var map = new Map("map", {
              center: [103.8, 36.08],
              zoom: 14,
              basemap: "osm"
            });

            // use a proxy page if a URL generated by this page is greater than 2000 characters
            //
            // this should not be needed as nearly all query & select functions are performed on the client
            //esriConfig.defaults.io.proxyUrl = "/proxy/";
            //add the census block points in on demand mode. Note that an info template has been defined so when
            //selected features are clicked a popup window will appear displaying the content defined in the info template.
            var featureLayer = new FeatureLayer("http://zhongren.esri.com/arcgis/rest/services/Hosted/lanzhouPOI/FeatureServer/0",{
              infoTemplate: new InfoTemplate(" ${name}", "${*}"),
              outFields: ["*"]
            });

            // selection symbol used to draw the selected census block points within the buffer polygon
            var symbol = new SimpleMarkerSymbol(
              SimpleMarkerSymbol.STYLE_CIRCLE,
              12,
              new SimpleLineSymbol(
                SimpleLineSymbol.STYLE_NULL,
                new Color([247, 34, 101, 0.9]),
                1
              ),
              new Color([207, 34, 171, 0.5])
            );
            featureLayer.setSelectionSymbol(symbol);

            //make unselected features invisible
            var nullSymbol = new SimpleMarkerSymbol().setSize(0);
            featureLayer.setRenderer(new SimpleRenderer(nullSymbol));

            map.addLayer(featureLayer);

            var circleSymb = new SimpleFillSymbol(
              SimpleFillSymbol.STYLE_NULL,
              new SimpleLineSymbol(
                SimpleLineSymbol.STYLE_SHORTDASHDOTDOT,
                new Color([105, 105, 105]),
                2
              ), new Color([255, 255, 0, 0.25])
            );
            var circle;

            //when the map is clicked create a buffer around the click point of the specified distance.
            map.on("click", function(evt){
                //server开始时间
                serverStartTime = new Date();
                j++;//序号
                clickPoint = {"x": evt.mapPoint.getLongitude(),
                              "y": evt.mapPoint.getLatitude()};
              circle = new Circle({
                center: evt.mapPoint,
                geodesic: true,
                radius: 100
                // radiusUnit: "esriMiles"
              });
              map.graphics.clear();
              map.infoWindow.hide();
              var graphic = new Graphic(circle, circleSymb);
              map.graphics.add(graphic);
              var query = new Query();
              query.geometry = circle.getExtent();
              //use a fast bounding box query. will only go to the server if bounding box is outside of the visible map
              featureLayer.queryFeatures(query, selectInBuffer);
            });

            function selectInBuffer(response){
                serverEndTime = new Date();
                serverTimeSpan = serverEndTime - serverStartTime;
                serverCount = response.features.length;
                mongoStartTime = new Date();
                 //===================================MongoDb开始===================================
                 var url = "http://localhost:3000/getNear";
                 var data = {
                    "x" : clickPoint.x,
                    "y" : clickPoint.y,
                    "distance" : 100
                };
                $.get(url, data, function(response, status){
                    mongoEndTime = new Date();
                    mongoTimeSpan = mongoEndTime - mongoStartTime;
                    mongoCount = response.result.length;
                    console.log(response);
                    var mongoSymbol = new SimpleMarkerSymbol();
                    var infoTemplate = new InfoTemplate("MongoDb结果","MongoDb结果")
                    if(response.result.length> 0){
                        for(var index in response.result){
                            var mongoPoint = new Point([response.result[index].key.geometry.x, response.result[index].key.geometry.y]);
                            var graphic= new Graphic(mongoPoint, mongoSymbol, null, infoTemplate);
                            map.graphics.add(graphic);
                            graphic = null;
                        }
                    }
                    var mongoVsServerTime= mongoTimeSpan- serverTimeSpan;
                    var mongVsServerCount= mongoCount - serverCount;
                    //控制显示
                    var html = '';
                    html +='<tr>';
                    html +='<td>'+ j +'</td>';
                    html +='<td>'+ serverStartTime.toLocaleTimeString() +'</td>';
                    html +='<td>'+ serverEndTime.toLocaleTimeString() +'</td>';
                    html +='<td>'+ serverTimeSpan +'</td>';
                    html +='<td>'+ serverCount +'</td>';
                    html +='<td>'+ mongoStartTime.toLocaleTimeString() +'</td>';
                    html +='<td>'+ mongoEndTime.toLocaleTimeString() +'</td>';
                    html +='<td>'+ mongoTimeSpan +'</td>';
                    html +='<td>'+ mongoCount +'</td>';
                    html +='<td class="focused">'+ mongoVsServerTime +'</td>';
                    html +='<td class="focused">'+ mongVsServerCount +'</td>';
                    html +='</tr>';
                    domConstruct.place(html, "spatialAttr", "last");
                    html =null;
                });
                //===================================MongoDb结束===================================
              var feature;
              var features = response.features;
              var inBuffer = [];
              //filter out features that are not actually in buffer, since we got all points in the buffer's bounding box
              for (var i = 0; i < features.length; i++) {
                feature = features[i];
                if(circle.contains(feature.geometry)){
                  inBuffer.push(feature.attributes[featureLayer.objectIdField]);
                }
              }
              var query = new Query();
              query.objectIds = inBuffer;
              //use a fast objectIds selection query (should not need to go to the server)
               featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW, function(results){
                var totalPopulation = sumPopulation(results);
                // var r = "";
                // r = "<b>The total Census Block population within the buffer is <i>" + totalPopulation + "</i>.</b>";
                // dom.byId("messages").innerHTML = r;
               });
           }

            function sumPopulation(features) {
              var popTotal = 0;
              for (var x = 0; x < features.length; x++) {
                popTotal = popTotal + features[x].attributes["NAME"];
              }
              console.log(features.length);
              return popTotal;
          }


        });
